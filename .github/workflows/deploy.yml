# name: Patient Survival Prediction Deployment

# on:
#   push:
#     branches:
#       - main

# jobs:
#   setup-and-deploy:
#     runs-on: ubuntu-latest

#     env:
#       AWS_REGION: "your-aws-region"
#       ECR_REPOSITORY: "patient-survival-app"
#       ECS_CLUSTER: "patient-survival-cluster"
#       ECS_SERVICE: "patient-survival-service"
#       CONTAINER_NAME: "survival-app-container"
#       IMAGE_URI: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.8'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Login to AWS ECR
#       id: ecr-login
#       uses: aws-actions/amazon-ecr-login@v1
#       with:
#         region: ${{ env.AWS_REGION }}

#     - name: Build Docker Image
#       run: |
#         docker build -t ${{ env.ECR_REPOSITORY }} .
#         docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.IMAGE_URI }}:latest

#     - name: Push Docker Image to ECR
#       run: |
#         docker push ${{ env.IMAGE_URI }}:latest

#     - name: Set up AWS CLI
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Create IAM Role for ECS Task Execution
#       run: |
#         aws iam create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file://ecs-assume-role-policy.json
#         aws iam attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

#     - name: Create VPC, Subnets, and Security Group
#       run: |
#         export VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
#         export SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text)
#         export SG_ID=$(aws ec2 create-security-group --group-name ecs-security-group --description "ECS security group" --vpc-id $VPC_ID --query 'GroupId' --output text)
#         aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0

#     - name: Create ECS Cluster
#       run: |
#         aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

#     - name: Register ECS Task Definition
#       run: |
#         aws ecs register-task-definition --family ${{ env.ECS_CLUSTER }} \
#           --network-mode awsvpc \
#           --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
#           --container-definitions '[{
#               "name": "${{ env.CONTAINER_NAME }}",
#               "image": "${{ env.IMAGE_URI }}:latest",
#               "essential": true,
#               "memory": 4096,
#               "cpu": 1024,
#               "portMappings": [{"containerPort": 80, "hostPort": 80}]
#           }]' \
#           --requires-compatibilities FARGATE \
#           --cpu "1024" \
#           --memory "4096"

#     - name: Create ECS Service
#       run: |
#         aws ecs create-service \
#           --cluster ${{ env.ECS_CLUSTER }} \
#           --service-name ${{ env.ECS_SERVICE }} \
#           --task-definition ${{ env.ECS_CLUSTER }} \
#           --desired-count 1 \
#           --launch-type FARGATE \
#           --network-configuration '{
#             "awsvpcConfiguration": {
#               "subnets": ["${SUBNET_ID}"],
#               "securityGroups": ["${SG_ID}"],
#               "assignPublicIp": "ENABLED"
#             }
#           }'
